# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Campana(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, nombre: str=None, descuento: float=None, finicio: date=None, ffin: date=None):  # noqa: E501
        """Campana - a model defined in Swagger

        :param nombre: The nombre of this Campana.  # noqa: E501
        :type nombre: str
        :param descuento: The descuento of this Campana.  # noqa: E501
        :type descuento: float
        :param finicio: The finicio of this Campana.  # noqa: E501
        :type finicio: date
        :param ffin: The ffin of this Campana.  # noqa: E501
        :type ffin: date
        """
        self.swagger_types = {
            'nombre': str,
            'descuento': float,
            'finicio': date,
            'ffin': date
        }

        self.attribute_map = {
            'nombre': 'nombre',
            'descuento': 'descuento',
            'finicio': 'finicio',
            'ffin': 'ffin'
        }
        self._nombre = nombre
        self._descuento = descuento
        self._finicio = finicio
        self._ffin = ffin

    @classmethod
    def from_dict(cls, dikt) -> 'Campana':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Campana of this Campana.  # noqa: E501
        :rtype: Campana
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nombre(self) -> str:
        """Gets the nombre of this Campana.


        :return: The nombre of this Campana.
        :rtype: str
        """
        return self._nombre

    @nombre.setter
    def nombre(self, nombre: str):
        """Sets the nombre of this Campana.


        :param nombre: The nombre of this Campana.
        :type nombre: str
        """
        if nombre is None:
            raise ValueError("Invalid value for `nombre`, must not be `None`")  # noqa: E501

        self._nombre = nombre

    @property
    def descuento(self) -> float:
        """Gets the descuento of this Campana.


        :return: The descuento of this Campana.
        :rtype: float
        """
        return self._descuento

    @descuento.setter
    def descuento(self, descuento: float):
        """Sets the descuento of this Campana.


        :param descuento: The descuento of this Campana.
        :type descuento: float
        """
        if descuento is None:
            raise ValueError("Invalid value for `descuento`, must not be `None`")  # noqa: E501

        self._descuento = descuento

    @property
    def finicio(self) -> date:
        """Gets the finicio of this Campana.


        :return: The finicio of this Campana.
        :rtype: date
        """
        return self._finicio

    @finicio.setter
    def finicio(self, finicio: date):
        """Sets the finicio of this Campana.


        :param finicio: The finicio of this Campana.
        :type finicio: date
        """
        if finicio is None:
            raise ValueError("Invalid value for `finicio`, must not be `None`")  # noqa: E501

        self._finicio = finicio

    @property
    def ffin(self) -> date:
        """Gets the ffin of this Campana.


        :return: The ffin of this Campana.
        :rtype: date
        """
        return self._ffin

    @ffin.setter
    def ffin(self, ffin: date):
        """Sets the ffin of this Campana.


        :param ffin: The ffin of this Campana.
        :type ffin: date
        """
        if ffin is None:
            raise ValueError("Invalid value for `ffin`, must not be `None`")  # noqa: E501

        self._ffin = ffin
