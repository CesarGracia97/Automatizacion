# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class RequestCreateProcessProceso(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, nombre: str=None, finicio: date=None, ffin: date=None, mes: int=None):  # noqa: E501
        """RequestCreateProcessProceso - a model defined in Swagger

        :param nombre: The nombre of this RequestCreateProcessProceso.  # noqa: E501
        :type nombre: str
        :param finicio: The finicio of this RequestCreateProcessProceso.  # noqa: E501
        :type finicio: date
        :param ffin: The ffin of this RequestCreateProcessProceso.  # noqa: E501
        :type ffin: date
        :param mes: The mes of this RequestCreateProcessProceso.  # noqa: E501
        :type mes: int
        """
        self.swagger_types = {
            'nombre': str,
            'finicio': date,
            'ffin': date,
            'mes': int
        }

        self.attribute_map = {
            'nombre': 'nombre',
            'finicio': 'finicio',
            'ffin': 'ffin',
            'mes': 'mes'
        }
        self._nombre = nombre
        self._finicio = finicio
        self._ffin = ffin
        self._mes = mes

    @classmethod
    def from_dict(cls, dikt) -> 'RequestCreateProcessProceso':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RequestCreateProcess_proceso of this RequestCreateProcessProceso.  # noqa: E501
        :rtype: RequestCreateProcessProceso
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nombre(self) -> str:
        """Gets the nombre of this RequestCreateProcessProceso.


        :return: The nombre of this RequestCreateProcessProceso.
        :rtype: str
        """
        return self._nombre

    @nombre.setter
    def nombre(self, nombre: str):
        """Sets the nombre of this RequestCreateProcessProceso.


        :param nombre: The nombre of this RequestCreateProcessProceso.
        :type nombre: str
        """
        if nombre is None:
            raise ValueError("Invalid value for `nombre`, must not be `None`")  # noqa: E501

        self._nombre = nombre

    @property
    def finicio(self) -> date:
        """Gets the finicio of this RequestCreateProcessProceso.


        :return: The finicio of this RequestCreateProcessProceso.
        :rtype: date
        """
        return self._finicio

    @finicio.setter
    def finicio(self, finicio: date):
        """Sets the finicio of this RequestCreateProcessProceso.


        :param finicio: The finicio of this RequestCreateProcessProceso.
        :type finicio: date
        """
        if finicio is None:
            raise ValueError("Invalid value for `finicio`, must not be `None`")  # noqa: E501

        self._finicio = finicio

    @property
    def ffin(self) -> date:
        """Gets the ffin of this RequestCreateProcessProceso.


        :return: The ffin of this RequestCreateProcessProceso.
        :rtype: date
        """
        return self._ffin

    @ffin.setter
    def ffin(self, ffin: date):
        """Sets the ffin of this RequestCreateProcessProceso.


        :param ffin: The ffin of this RequestCreateProcessProceso.
        :type ffin: date
        """
        if ffin is None:
            raise ValueError("Invalid value for `ffin`, must not be `None`")  # noqa: E501

        self._ffin = ffin

    @property
    def mes(self) -> int:
        """Gets the mes of this RequestCreateProcessProceso.


        :return: The mes of this RequestCreateProcessProceso.
        :rtype: int
        """
        return self._mes

    @mes.setter
    def mes(self, mes: int):
        """Sets the mes of this RequestCreateProcessProceso.


        :param mes: The mes of this RequestCreateProcessProceso.
        :type mes: int
        """
        if mes is None:
            raise ValueError("Invalid value for `mes`, must not be `None`")  # noqa: E501

        self._mes = mes
