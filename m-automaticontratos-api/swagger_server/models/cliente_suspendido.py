# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ClienteSuspendido(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, cliente: str=None, contrato: float=None, cuenta: float=None, detalle: str=None, fecha_exclusion: str=None):  # noqa: E501
        """ClienteSuspendido - a model defined in Swagger

        :param cliente: The cliente of this ClienteSuspendido.  # noqa: E501
        :type cliente: str
        :param contrato: The contrato of this ClienteSuspendido.  # noqa: E501
        :type contrato: float
        :param cuenta: The cuenta of this ClienteSuspendido.  # noqa: E501
        :type cuenta: float
        :param detalle: The detalle of this ClienteSuspendido.  # noqa: E501
        :type detalle: str
        :param fecha_exclusion: The fecha_exclusion of this ClienteSuspendido.  # noqa: E501
        :type fecha_exclusion: str
        """
        self.swagger_types = {
            'cliente': str,
            'contrato': float,
            'cuenta': float,
            'detalle': str,
            'fecha_exclusion': str
        }

        self.attribute_map = {
            'cliente': 'cliente',
            'contrato': 'contrato',
            'cuenta': 'cuenta',
            'detalle': 'detalle',
            'fecha_exclusion': 'fecha_exclusion'
        }
        self._cliente = cliente
        self._contrato = contrato
        self._cuenta = cuenta
        self._detalle = detalle
        self._fecha_exclusion = fecha_exclusion

    @classmethod
    def from_dict(cls, dikt) -> 'ClienteSuspendido':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Cliente_Suspendido of this ClienteSuspendido.  # noqa: E501
        :rtype: ClienteSuspendido
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cliente(self) -> str:
        """Gets the cliente of this ClienteSuspendido.


        :return: The cliente of this ClienteSuspendido.
        :rtype: str
        """
        return self._cliente

    @cliente.setter
    def cliente(self, cliente: str):
        """Sets the cliente of this ClienteSuspendido.


        :param cliente: The cliente of this ClienteSuspendido.
        :type cliente: str
        """
        if cliente is None:
            raise ValueError("Invalid value for `cliente`, must not be `None`")  # noqa: E501

        self._cliente = cliente

    @property
    def contrato(self) -> float:
        """Gets the contrato of this ClienteSuspendido.


        :return: The contrato of this ClienteSuspendido.
        :rtype: float
        """
        return self._contrato

    @contrato.setter
    def contrato(self, contrato: float):
        """Sets the contrato of this ClienteSuspendido.


        :param contrato: The contrato of this ClienteSuspendido.
        :type contrato: float
        """
        if contrato is None:
            raise ValueError("Invalid value for `contrato`, must not be `None`")  # noqa: E501

        self._contrato = contrato

    @property
    def cuenta(self) -> float:
        """Gets the cuenta of this ClienteSuspendido.


        :return: The cuenta of this ClienteSuspendido.
        :rtype: float
        """
        return self._cuenta

    @cuenta.setter
    def cuenta(self, cuenta: float):
        """Sets the cuenta of this ClienteSuspendido.


        :param cuenta: The cuenta of this ClienteSuspendido.
        :type cuenta: float
        """
        if cuenta is None:
            raise ValueError("Invalid value for `cuenta`, must not be `None`")  # noqa: E501

        self._cuenta = cuenta

    @property
    def detalle(self) -> str:
        """Gets the detalle of this ClienteSuspendido.


        :return: The detalle of this ClienteSuspendido.
        :rtype: str
        """
        return self._detalle

    @detalle.setter
    def detalle(self, detalle: str):
        """Sets the detalle of this ClienteSuspendido.


        :param detalle: The detalle of this ClienteSuspendido.
        :type detalle: str
        """
        if detalle is None:
            raise ValueError("Invalid value for `detalle`, must not be `None`")  # noqa: E501

        self._detalle = detalle

    @property
    def fecha_exclusion(self) -> str:
        """Gets the fecha_exclusion of this ClienteSuspendido.


        :return: The fecha_exclusion of this ClienteSuspendido.
        :rtype: str
        """
        return self._fecha_exclusion

    @fecha_exclusion.setter
    def fecha_exclusion(self, fecha_exclusion: str):
        """Sets the fecha_exclusion of this ClienteSuspendido.


        :param fecha_exclusion: The fecha_exclusion of this ClienteSuspendido.
        :type fecha_exclusion: str
        """
        if fecha_exclusion is None:
            raise ValueError("Invalid value for `fecha_exclusion`, must not be `None`")  # noqa: E501

        self._fecha_exclusion = fecha_exclusion
